// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lars.proto

#include "lars.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_lars_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HostInfo_lars_2eproto;
namespace lars {
class HostInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HostInfo> _instance;
} _HostInfo_default_instance_;
class GetRouteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRouteRequest> _instance;
} _GetRouteRequest_default_instance_;
class GetRouteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRouteResponse> _instance;
} _GetRouteResponse_default_instance_;
}  // namespace lars
static void InitDefaultsHostInfo_lars_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lars::_HostInfo_default_instance_;
    new (ptr) ::lars::HostInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lars::HostInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HostInfo_lars_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHostInfo_lars_2eproto}, {}};

static void InitDefaultsGetRouteRequest_lars_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lars::_GetRouteRequest_default_instance_;
    new (ptr) ::lars::GetRouteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lars::GetRouteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetRouteRequest_lars_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetRouteRequest_lars_2eproto}, {}};

static void InitDefaultsGetRouteResponse_lars_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lars::_GetRouteResponse_default_instance_;
    new (ptr) ::lars::GetRouteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lars::GetRouteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetRouteResponse_lars_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetRouteResponse_lars_2eproto}, {
      &scc_info_HostInfo_lars_2eproto.base,}};

void InitDefaults_lars_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_HostInfo_lars_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRouteRequest_lars_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRouteResponse_lars_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_lars_2eproto[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_lars_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_lars_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_lars_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lars::HostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lars::HostInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::lars::HostInfo, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lars::GetRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lars::GetRouteRequest, modid_),
  PROTOBUF_FIELD_OFFSET(::lars::GetRouteRequest, cmdid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lars::GetRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lars::GetRouteResponse, modid_),
  PROTOBUF_FIELD_OFFSET(::lars::GetRouteResponse, cmdid_),
  PROTOBUF_FIELD_OFFSET(::lars::GetRouteResponse, host_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lars::HostInfo)},
  { 7, -1, sizeof(::lars::GetRouteRequest)},
  { 14, -1, sizeof(::lars::GetRouteResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::lars::_HostInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lars::_GetRouteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lars::_GetRouteResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_lars_2eproto = {
  {}, AddDescriptors_lars_2eproto, "lars.proto", schemas,
  file_default_instances, TableStruct_lars_2eproto::offsets,
  file_level_metadata_lars_2eproto, 3, file_level_enum_descriptors_lars_2eproto, file_level_service_descriptors_lars_2eproto,
};

const char descriptor_table_protodef_lars_2eproto[] =
  "\n\nlars.proto\022\004lars\"$\n\010HostInfo\022\n\n\002ip\030\001 \001"
  "(\005\022\014\n\004port\030\002 \001(\005\"/\n\017GetRouteRequest\022\r\n\005m"
  "odid\030\001 \001(\005\022\r\n\005cmdid\030\002 \001(\005\"N\n\020GetRouteRes"
  "ponse\022\r\n\005modid\030\001 \001(\005\022\r\n\005cmdid\030\002 \001(\005\022\034\n\004h"
  "ost\030\003 \003(\0132\016.lars.HostInfo*K\n\tMessageId\022\r"
  "\n\tID_UNKNOW\020\000\022\026\n\022ID_GetRouteRequest\020\001\022\027\n"
  "\023ID_GetRouteResponse\020\002b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_lars_2eproto = {
  false, InitDefaults_lars_2eproto, 
  descriptor_table_protodef_lars_2eproto,
  "lars.proto", &assign_descriptors_table_lars_2eproto, 270,
};

void AddDescriptors_lars_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_lars_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lars_2eproto = []() { AddDescriptors_lars_2eproto(); return true; }();
namespace lars {
const ::google::protobuf::EnumDescriptor* MessageId_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_lars_2eproto);
  return file_level_enum_descriptors_lars_2eproto[0];
}
bool MessageId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void HostInfo::InitAsDefaultInstance() {
}
class HostInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostInfo::kIpFieldNumber;
const int HostInfo::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostInfo::HostInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lars.HostInfo)
}
HostInfo::HostInfo(const HostInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:lars.HostInfo)
}

void HostInfo::SharedCtor() {
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(port_));
}

HostInfo::~HostInfo() {
  // @@protoc_insertion_point(destructor:lars.HostInfo)
  SharedDtor();
}

void HostInfo::SharedDtor() {
}

void HostInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostInfo& HostInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HostInfo_lars_2eproto.base);
  return *internal_default_instance();
}


void HostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lars.HostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HostInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 ip = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lars.HostInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lars.HostInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lars.HostInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lars.HostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ip(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lars.HostInfo)
}

::google::protobuf::uint8* HostInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lars.HostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lars.HostInfo)
  return target;
}

size_t HostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lars.HostInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lars.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HostInfo* source =
      ::google::protobuf::DynamicCastToGenerated<HostInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lars.HostInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lars.HostInfo)
    MergeFrom(*source);
  }
}

void HostInfo::MergeFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lars.HostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void HostInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lars.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostInfo::CopyFrom(const HostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lars.HostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostInfo::IsInitialized() const {
  return true;
}

void HostInfo::Swap(HostInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostInfo::InternalSwap(HostInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ip_, other->ip_);
  swap(port_, other->port_);
}

::google::protobuf::Metadata HostInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lars_2eproto);
  return ::file_level_metadata_lars_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetRouteRequest::InitAsDefaultInstance() {
}
class GetRouteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRouteRequest::kModidFieldNumber;
const int GetRouteRequest::kCmdidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRouteRequest::GetRouteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lars.GetRouteRequest)
}
GetRouteRequest::GetRouteRequest(const GetRouteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmdid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  // @@protoc_insertion_point(copy_constructor:lars.GetRouteRequest)
}

void GetRouteRequest::SharedCtor() {
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
}

GetRouteRequest::~GetRouteRequest() {
  // @@protoc_insertion_point(destructor:lars.GetRouteRequest)
  SharedDtor();
}

void GetRouteRequest::SharedDtor() {
}

void GetRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRouteRequest& GetRouteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetRouteRequest_lars_2eproto.base);
  return *internal_default_instance();
}


void GetRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lars.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRouteRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetRouteRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 modid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_modid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 cmdid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_cmdid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRouteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lars.GetRouteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 modid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cmdid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lars.GetRouteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lars.GetRouteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRouteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lars.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lars.GetRouteRequest)
}

::google::protobuf::uint8* GetRouteRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lars.GetRouteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lars.GetRouteRequest)
  return target;
}

size_t GetRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lars.GetRouteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modid());
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRouteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lars.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetRouteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lars.GetRouteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lars.GetRouteRequest)
    MergeFrom(*source);
  }
}

void GetRouteRequest::MergeFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lars.GetRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.modid() != 0) {
    set_modid(from.modid());
  }
  if (from.cmdid() != 0) {
    set_cmdid(from.cmdid());
  }
}

void GetRouteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lars.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteRequest::CopyFrom(const GetRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lars.GetRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteRequest::IsInitialized() const {
  return true;
}

void GetRouteRequest::Swap(GetRouteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRouteRequest::InternalSwap(GetRouteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(modid_, other->modid_);
  swap(cmdid_, other->cmdid_);
}

::google::protobuf::Metadata GetRouteRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lars_2eproto);
  return ::file_level_metadata_lars_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetRouteResponse::InitAsDefaultInstance() {
}
class GetRouteResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRouteResponse::kModidFieldNumber;
const int GetRouteResponse::kCmdidFieldNumber;
const int GetRouteResponse::kHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRouteResponse::GetRouteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lars.GetRouteResponse)
}
GetRouteResponse::GetRouteResponse(const GetRouteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      host_(from.host_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&modid_, &from.modid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmdid_) -
    reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  // @@protoc_insertion_point(copy_constructor:lars.GetRouteResponse)
}

void GetRouteResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetRouteResponse_lars_2eproto.base);
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
}

GetRouteResponse::~GetRouteResponse() {
  // @@protoc_insertion_point(destructor:lars.GetRouteResponse)
  SharedDtor();
}

void GetRouteResponse::SharedDtor() {
}

void GetRouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRouteResponse& GetRouteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetRouteResponse_lars_2eproto.base);
  return *internal_default_instance();
}


void GetRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lars.GetRouteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.Clear();
  ::memset(&modid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmdid_) -
      reinterpret_cast<char*>(&modid_)) + sizeof(cmdid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRouteResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetRouteResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 modid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_modid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 cmdid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_cmdid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .lars.HostInfo host = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::lars::HostInfo::_InternalParse;
          object = msg->add_host();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRouteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lars.GetRouteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 modid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cmdid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lars.HostInfo host = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lars.GetRouteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lars.GetRouteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRouteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lars.GetRouteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  // repeated .lars.HostInfo host = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->host_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->host(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lars.GetRouteResponse)
}

::google::protobuf::uint8* GetRouteResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lars.GetRouteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modid = 1;
  if (this->modid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  // repeated .lars.HostInfo host = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->host_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->host(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lars.GetRouteResponse)
  return target;
}

size_t GetRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lars.GetRouteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lars.HostInfo host = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->host_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->host(static_cast<int>(i)));
    }
  }

  // int32 modid = 1;
  if (this->modid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->modid());
  }

  // int32 cmdid = 2;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRouteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lars.GetRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRouteResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetRouteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lars.GetRouteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lars.GetRouteResponse)
    MergeFrom(*source);
  }
}

void GetRouteResponse::MergeFrom(const GetRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lars.GetRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  host_.MergeFrom(from.host_);
  if (from.modid() != 0) {
    set_modid(from.modid());
  }
  if (from.cmdid() != 0) {
    set_cmdid(from.cmdid());
  }
}

void GetRouteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lars.GetRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteResponse::CopyFrom(const GetRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lars.GetRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteResponse::IsInitialized() const {
  return true;
}

void GetRouteResponse::Swap(GetRouteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRouteResponse::InternalSwap(GetRouteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&host_)->InternalSwap(CastToBase(&other->host_));
  swap(modid_, other->modid_);
  swap(cmdid_, other->cmdid_);
}

::google::protobuf::Metadata GetRouteResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lars_2eproto);
  return ::file_level_metadata_lars_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lars
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::lars::HostInfo* Arena::CreateMaybeMessage< ::lars::HostInfo >(Arena* arena) {
  return Arena::CreateInternal< ::lars::HostInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::lars::GetRouteRequest* Arena::CreateMaybeMessage< ::lars::GetRouteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lars::GetRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lars::GetRouteResponse* Arena::CreateMaybeMessage< ::lars::GetRouteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lars::GetRouteResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
